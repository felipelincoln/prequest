searchNodes=[{"doc":"Prequest keeps the contexts that define your domain and business logic.Contexts are also responsible for managing your data, regardless if it comes from the database, an external API or others.","ref":"Prequest.html","title":"Prequest","type":"module"},{"doc":"A public API for fetching feeds.","ref":"Prequest.Feed.html","title":"Prequest.Feed","type":"module"},{"doc":"Struct for modeling a feed.It contains a metadata field, which describesarticles_count : how many articles the build/2 alone was able to fetch.results : how many articles the search/2 got. It evaluates the same as articles_count if there is no search/2 in the pipeline.filter : what topics was selected from build/2. Articles in a feed contains all the topics listed here.topics_count : the count of all topics for all articles (be it a distinct topic or not).search : the substring used in search/2.page : current feed page.per_page : amount of articles to show each page.has_next? : if there is articles in the next page.and also the fieldsquery : an ecto query that is executed by page/4 to fetch articles from database or cache.articles : a list of articles.reports : a list of reports from all articles.topics : a list of tuples {count, topic}, being count the amount of articles that have this topic.topics_count is the sum of count in all {count, topic}.Exampleiex&gt; build(Article, [&quot;otp&quot;]) |&gt; search(&quot;prequest&quot;) |&gt; page(0) %Prequest.Feed{ __meta__: %{ articles_count: 234, filter: {:topics, [&quot;otp&quot;]}, has_next?: true, page: 0, per_page: 10, results: 56, search: &quot;prequest&quot;, topics_count: 178 }, articles: [ %Prequest.Manage.Article{ ... }, %Prequest.Manage.Article{ ... }, ... ], query: # Ecto.Query&lt;from a0 in Prequest.Manage.Article, as: :articles, # join: t1 in assoc(a0, :topics), where: t1.name in ^[&quot;otp&quot;], # where: ilike(a0.title, ^&quot;%prequest%&quot;), group_by: [a0.id], # having: count(t1.id, :distinct) == ^1, order_by: [desc: a0.updated_at], # limit: ^2, offset: ^0, select: a0&gt;, reports: [], topics: [ {34, %Prequest.Manage.Topic{ ... }}, {15, %Prequest.Manage.Topic{ ... }}, ... ] }","ref":"Prequest.Feed.html#__struct__/0","title":"Prequest.Feed.__struct__/0","type":"function"},{"doc":"Populate a feed struct with all information but articles.ExamplesTo get a feed from all the articlesiex&gt; build(Article) %Prequest.Feed{ __meta__: %{articles_count: 1234, results: 1234, topics_count: 1567}, articles: [], query: # Ecto.Query&lt;from a0 in Prequest.Manage.Article, as: :articles, select: a0&gt;, reports: [ %Prequest.Manage.Report{ ... }, %Prequest.Manage.Report{ ... }, ... ], topics: [ {89, %Prequest.Manage.Topic{ ... }}, {12, %Prequest.Manage.Topic{ ... }}, ... ] }or from a specific topic / useriex&gt; topic = Manage.get_topic(&quot;elixir&quot;) iex&gt; build(topic) %Feed{ ... } iex&gt; user = Manage.get_user(&quot;felipelincoln&quot;) iex&gt; build(user) %Feed{ ... }","ref":"Prequest.Feed.html#build/1","title":"Prequest.Feed.build/1","type":"function"},{"doc":"Same as build/1 but adding a topics filter to the ecto query.The filtering will make the query match only articles that contain all the topics listed.Exampleiex&gt; build(Article, [&quot;elixir&quot;, &quot;otp&quot;]) %Prequest.Feed{ __meta__: %{ articles_count: 123, filter: {:topics, [&quot;elixir&quot;, &quot;otp&quot;]}, results: 123, topics_count: 145 }, articles: [], query: # Ecto.Query&lt;from a0 in Prequest.Manage.Article, as: :articles, # join: t1 in assoc(a0, :topics), where: t1.name in ^[&quot;otp&quot;], # group_by: [a0.id], having: count(t1.id, :distinct) == ^1, select: a0&gt;, reports: [], topics: [ {67, %Prequest.Manage.Topic{ ... }}, {54, %Prequest.Manage.Topic{ ... }}, ... ] }","ref":"Prequest.Feed.html#build/2","title":"Prequest.Feed.build/2","type":"function"},{"doc":"Returns the feed with the articles field populatedExamplesiex&gt; build(Article, [&quot;otp&quot;]) |&gt; page(0) %Prequest.Feed{ __meta__: %{ articles_count: 67, filter: {:topics, [&quot;otp&quot;]}, has_next?: true, page: 0, per_page: 10, results: 67, topics_count: 189 }, articles: [ %Prequest.Manage.Article{ ... }, %Prequest.Manage.Article{ ... }, ... ], query: # Ecto.Query&lt;from a0 in Prequest.Manage.Article, as: :articles, # join: t1 in assoc(a0, :topics), where: t1.name in ^[&quot;otp&quot;], # where: ilike(a0.title, ^&quot;%prequest%&quot;), group_by: [a0.id], # having: count(t1.id, :distinct) == ^1, order_by: [desc: a0.updated_at], # limit: ^2, offset: ^0, select: a0&gt;, reports: [], topics: [ {45, %Prequest.Manage.Topic{ ... }}, {32, %Prequest.Manage.Topic{ ... }}, ... ] }","ref":"Prequest.Feed.html#page/2","title":"Prequest.Feed.page/2","type":"function"},{"doc":"Same as page/2 but ordering by date or views.Examplesiex&gt; build(Article) |&gt; page(0, [desc: :date]) iex&gt; build(Article) |&gt; page(0, [asc: :date]) iex&gt; build(Article) |&gt; page(0, [desc: :views]) iex&gt; build(Article) |&gt; page(0, [asc: :views])","ref":"Prequest.Feed.html#page/3","title":"Prequest.Feed.page/3","type":"function"},{"doc":"Same as page/3 but with no caching on pages layer (to be used with search/2).Since almost every search query is unique among users, it is not ideal to keep a copy of this specific feed into the server's RAM. The caching on the build stage still occurs though.Examplesiex&gt; build(Article, [&quot;ecto&quot;]) |&gt; search(&quot;prequest&quot;) |&gt; page(0, :nocache, [desc: :views]) %Prequest.Feed{ __meta__: %{ has_next?: true, page: 0, per_page: 10, # the remaining comes from cache }, articles: [ %Prequest.Manage.Article{ ... }, %Prequest.Manage.Article{ ... }, ... ], query: # Ecto.Query&lt;from a0 in Prequest.Manage.Article, as: :articles, # left_join: v1 in assoc(a0, :views), where: ilike(a0.title, ^&quot;%prequest%&quot;), # group_by: [a0.id], order_by: [desc: count(v1.id), desc: a0.updated_at], # limit: ^2, offset: ^0, select: a0&gt;, reports: [ # from build stage cache. ], topics: [ # from build stage cache. ] }","ref":"Prequest.Feed.html#page/4","title":"Prequest.Feed.page/4","type":"function"},{"doc":"Returns the feed adding a search expression to the ecto query.Examplesiex&gt; build(Article) |&gt; search(&quot;prequest&quot;) %Prequest.Feed{ __meta__: %{ articles_count: 107, results: 23, search: &quot;prequest&quot;, topics_count: 160 }, articles: [], query: # Ecto.Query&lt;from a0 in Prequest.Manage.Article, as: :articles, # where: ilike(a0.title, ^&quot;%prequest%&quot;), select: a0&gt;, reports: [ %Prequest.Manage.Report{ ... }, %Prequest.Manage.Report{ ... }, ... ], topics: [ {78, %Prequest.Manage.Topic{ ... }}, {45, %Prequest.Manage.Topic{ ... }}, ... ] }","ref":"Prequest.Feed.html#search/2","title":"Prequest.Feed.search/2","type":"function"},{"doc":"no docs yet","ref":"Prequest.Feed.html#source/2","title":"Prequest.Feed.source/2","type":"function"},{"doc":"","ref":"Prequest.Feed.html#t:ecto_query/0","title":"Prequest.Feed.ecto_query/0","type":"type"},{"doc":"","ref":"Prequest.Feed.html#t:feed/0","title":"Prequest.Feed.feed/0","type":"type"},{"doc":"Handle dates for the feed.","ref":"Prequest.Feed.Load.DateHelpers.html","title":"Prequest.Feed.Load.DateHelpers","type":"module"},{"doc":"Gets the first and last day from n months ago.Examplesiex&gt; get_months_ago(0) [~N[2020-11-01 00:00:00], ~N[2020-11-30 23:59:59]] iex&gt; get_months_ago(1) [~N[2020-10-01 00:00:00], ~N[2020-10-31 23:59:59]] iex&gt; get_months_ago(60) [~N[2015-11-01 00:00:00], ~N[2015-11-30 23:59:59]]","ref":"Prequest.Feed.Load.DateHelpers.html#get_months_ago/1","title":"Prequest.Feed.Load.DateHelpers.get_months_ago/1","type":"function"},{"doc":"A helper module to work with data preloading.","ref":"Prequest.Helpers.html","title":"Prequest.Helpers","type":"module"},{"doc":"Preload all fields from a schema's struct inside a pipeline.ExamplesIt can be used for create_* pipelines,iex&gt; create_article(%{...}) {:ok, %Article{ #=&gt; reports: #Ecto.Association.NotLoaded&lt;association :reports is not loaded&gt; #=&gt; user: #Ecto.Association.NotLoaded&lt;association :user is not loaded&gt; #=&gt; views: #Ecto.Association.NotLoaded&lt;association :views is not loaded&gt; ... } } iex&gt; create_article(%{...}) |&gt; preload() {:ok, %Article{ reports: [%Report{}, ...], topics: [%Topic{}, ...], user: %User{}, views: [%View{}, ...], ... } }and also update_* pipelines.iex&gt; update_report(%{...}) {:ok, %Report{ #=&gt; user: #Ecto.Association.NotLoaded&lt;association :user is not loaded&gt; #=&gt; article: #Ecto.Association.NotLoaded&lt;association :article is not loaded&gt; ... } } iex&gt; update_report(%{...}) |&gt; preload() {:ok, %Report{ user: %User{}, article: %Article{}, ... } }If the preceding changeset contain errors it does not do anything.iex&gt; create_topic(%{name: nil}) |&gt; preload() {:error, %Ecto.Changeset{}}","ref":"Prequest.Helpers.html#preload/1","title":"Prequest.Helpers.preload/1","type":"function"},{"doc":"Preload fields from a schema's struct.Raises ArgumentError if the fields does not exist in the struct.Examplesiex&gt; user %User{} #=&gt; articles: #Ecto.Association.NotLoaded&lt;association :articles is not loaded&gt; iex&gt; preload!(user, :articles) %User{ articles: [%Article{}, ...], ... } iex&gt; article %Article{ #=&gt; reports: #Ecto.Association.NotLoaded&lt;association :reports is not loaded&gt; #=&gt; views: #Ecto.Association.NotLoaded&lt;association :views is not loaded&gt; } iex&gt; preload!(article, [:views, :reports]) %Article{ views: [%View{}, ...], reports: [%Report{}, ...], ... } iex&gt; preload!(article, :field) ** (ArgumentError)","ref":"Prequest.Helpers.html#preload!/2","title":"Prequest.Helpers.preload!/2","type":"function"},{"doc":"","ref":"Prequest.Helpers.html#t:changeset/0","title":"Prequest.Helpers.changeset/0","type":"type"},{"doc":"A public API for managing content.","ref":"Prequest.Manage.html","title":"Prequest.Manage","type":"module"},{"doc":"Creates an article.Examplesiex&gt; create_article(%{ ...&gt; title: &quot;some title&quot;, ...&gt; subtitle: &quot;some subtitle&quot;, ...&gt; source: &quot;some github url&quot;, ...&gt; cover: &quot;some image url&quot;, ...&gt; user_id: 10 ...&gt; }) {:ok, %Article{}} iex&gt; create_article(%{}) {:error, %Ecto.Changeset{}}A topics key can be passed in the map input to associate topics with the article, whether it already exists or not.iex&gt; create_article(%{ ...&gt; title: &quot;some title2&quot;, ...&gt; subtitle: &quot;some subtitle2&quot;, ...&gt; source: &quot;some github url2&quot;, ...&gt; cover: &quot;some image url2&quot;, ...&gt; user_id: 10, ...&gt; topics: [%{name: &quot;elixir&quot;}, %{name: &quot;phoenix&quot;}] ...&gt; }) {:ok, %Article{}}Once the topics named &quot;elixir&quot; and &quot;phoenix&quot; was created in the previous example, we can associate them again with a new article. We can proceed in two manners:Get its struct from database and insert it into the topics list.Pass the same map we used to create it.Let's use the &quot;phoenix&quot; topic in the former way and &quot;elixir&quot; in the latter.iex&gt; topic = Manage.get_topic(&quot;phoenix&quot;) iex&gt; create_article(%{ ...&gt; title: &quot;some title3&quot;, ...&gt; subtitle: &quot;some subtitle3&quot;, ...&gt; source: &quot;some github url3&quot;, ...&gt; cover: &quot;some image url3&quot;, ...&gt; user_id: 10, ...&gt; topics: [%{name: &quot;elixir&quot;}, topic] ...&gt; }) {:ok, %Article{}}","ref":"Prequest.Manage.html#create_article/1","title":"Prequest.Manage.create_article/1","type":"function"},{"doc":"Creates a report.Examplesiex&gt; create_report(%{user_id: 15, article_id: 3}) {:ok, %Report{}} iex&gt; create_report(%{}) {:error, %Ecto.Changeset{}}","ref":"Prequest.Manage.html#create_report/1","title":"Prequest.Manage.create_report/1","type":"function"},{"doc":"Creates a topic.Examplesiex&gt; create_topic(%{name: &quot;new topic&quot;}) {:ok, %Topic{}} iex&gt; create_topic(%{name: &quot;&quot;}) {:error, %Ecto.Changeset{}}","ref":"Prequest.Manage.html#create_topic/1","title":"Prequest.Manage.create_topic/1","type":"function"},{"doc":"Creates a user.Examplesiex&gt; create_user(%{ username: &quot;felipelincoln&quot;, name: &quot;Felipe de Souza Lincoln&quot;, bio: &quot;this is my bio&quot; }) {:ok, %User{}} iex&gt; create_user(%{}) {:error, %Ecto.Changeset{}}","ref":"Prequest.Manage.html#create_user/1","title":"Prequest.Manage.create_user/1","type":"function"},{"doc":"Creates a view.Examplesiex&gt; create_view(%{user_id: 23, article_id: 12}) {:ok, %View{}} iex&gt; create_view(%{}) {:error, %Ecto.Changeset{}}","ref":"Prequest.Manage.html#create_view/1","title":"Prequest.Manage.create_view/1","type":"function"},{"doc":"Deletes an article.Examplesiex&gt; delete_article(article) {:ok, %Article{}} iex&gt; delete_article(article) {:error, %Ecto.Changeset{}}","ref":"Prequest.Manage.html#delete_article/1","title":"Prequest.Manage.delete_article/1","type":"function"},{"doc":"Deletes a report.Examplesiex&gt; delete_report(report) {:ok, %Report{}} iex&gt; delete_report(report) {:error, %Ecto.Changeset{}}","ref":"Prequest.Manage.html#delete_report/1","title":"Prequest.Manage.delete_report/1","type":"function"},{"doc":"Deletes a topic.Examplesiex&gt; delete_topic(topic) {:ok, %Topic{}} iex&gt; delete_topic(topic) {:error, %Ecto.Changeset{}}","ref":"Prequest.Manage.html#delete_topic/1","title":"Prequest.Manage.delete_topic/1","type":"function"},{"doc":"Deletes a user.Examplesiex&gt; delete_user(user) {:ok, %User{}} iex&gt; delete_user(user) {:error, %Ecto.Changeset{}}","ref":"Prequest.Manage.html#delete_user/1","title":"Prequest.Manage.delete_user/1","type":"function"},{"doc":"Deletes a view.Examplesiex&gt; delete_view(view) {:ok, %View{}} iex&gt; delete_view(view) {:error, %Ecto.Changeset{}}","ref":"Prequest.Manage.html#delete_view/1","title":"Prequest.Manage.delete_view/1","type":"function"},{"doc":"Gets a single article.Raises Ecto.NoResultsError if the Article does not exist.Examplesiex&gt; get_article!(123) %Article{} iex&gt; get_article!(456) ** (Ecto.NoResultsError)","ref":"Prequest.Manage.html#get_article!/1","title":"Prequest.Manage.get_article!/1","type":"function"},{"doc":"Gets a single article by its source.Examplesiex&gt; get_article_by_source(&quot;https://github.com/felipelincoln/blog/blob/master/easy_compose.md&quot;) %Article{} iex&gt; get_article_by_source(&quot;&quot;) nil","ref":"Prequest.Manage.html#get_article_by_source/1","title":"Prequest.Manage.get_article_by_source/1","type":"function"},{"doc":"Gets a single report.Raises Ecto.NoResultsError if the Report does not exist.Examplesiex&gt; get_report!(123) %Report{} iex&gt; get_report!(456) ** (Ecto.NoResultsError)","ref":"Prequest.Manage.html#get_report!/1","title":"Prequest.Manage.get_report!/1","type":"function"},{"doc":"Gets a single topic by its name.Examplesiex&gt; get_topic(&quot;elixir&quot;) %Topic{} iex&gt; get_topic(&quot;&quot;) nil","ref":"Prequest.Manage.html#get_topic/1","title":"Prequest.Manage.get_topic/1","type":"function"},{"doc":"Gets a single user by its username.Examplesiex&gt; get_user(&quot;felipelincoln&quot;) %User{} iex&gt; get_user(&quot;nonexistinguser&quot;) nil","ref":"Prequest.Manage.html#get_user/1","title":"Prequest.Manage.get_user/1","type":"function"},{"doc":"Gets a single user.Raises Ecto.NoResultsError if the User does not exist.Examplesiex&gt; get_user!(123) %User{} iex&gt; get_user!(456) ** (Ecto.NoResultsError)","ref":"Prequest.Manage.html#get_user!/1","title":"Prequest.Manage.get_user!/1","type":"function"},{"doc":"Gets a single view.Examplesiex&gt; get_view(user.id, article.id) %View{} iex&gt; get_view(0, 0) nil","ref":"Prequest.Manage.html#get_view/2","title":"Prequest.Manage.get_view/2","type":"function"},{"doc":"Updates an article.Examplesiex&gt; update_article(article, %{title: &quot;updated title&quot;}) {:ok, %Article{}} iex&gt; update_article(article, %{source: nil}) {:error, %Ecto.Changeset{}}When updating the topics do not forget to append the new one to the existing ones. Otherwise it will be replaced.To see how the topics field works take a look at create_article/1iex&gt; article |&gt; Prequest.Helpers.preload!(:topics) %Article{ topics: [ %Topic{name: &quot;elixir&quot;}, %Topic{name: &quot;ecto&quot;} ], ... } iex&gt; {:ok, article} = update_article(article, %{topics: [%{name: &quot;phoenix&quot;}]}) {:ok, %Article{ topics: [%Topic{name: &quot;phoenix&quot;}], ... } } iex&gt; update_article(article, %{topics: article.topics ++ [%{name: &quot;elixir&quot;}, %{name: &quot;ecto&quot;}]}) {:ok, %Article{ topics: [ %Topic{name: &quot;elixir&quot;}, %Topic{name: &quot;ecto&quot;}, %Topic{name: &quot;phoenix&quot;} ], ... } }","ref":"Prequest.Manage.html#update_article/2","title":"Prequest.Manage.update_article/2","type":"function"},{"doc":"Updates a report.Examplesiex&gt; update_report(report, %{message: &quot;updated message&quot;}) {:ok, %Report{}} iex&gt; update_report(report, %{article_id: nil}) {:error, %Ecto.Changeset{}}","ref":"Prequest.Manage.html#update_report/2","title":"Prequest.Manage.update_report/2","type":"function"},{"doc":"Updates a topic.Examplesiex&gt; update_topic(topic, %{name: &quot;updated name&quot;}) {:ok, %Topic{}} iex&gt; update_topic(topic, %{name: &quot;&quot;}) {:error, %Ecto.Changeset{}}","ref":"Prequest.Manage.html#update_topic/2","title":"Prequest.Manage.update_topic/2","type":"function"},{"doc":"Updates a user.Examplesiex&gt; update_user(user, %{bio: &quot;updated bio&quot;}) {:ok, %User{}} iex&gt; update_user(user, %{username: nil}) {:error, %Ecto.Changeset{}}","ref":"Prequest.Manage.html#update_user/2","title":"Prequest.Manage.update_user/2","type":"function"},{"doc":"Updates a view.Examplesiex&gt; update_view(view, %{liked?: true}) {:ok, %View{}} iex&gt; update_view(view, %{article_id: nil}) {:error, %Ecto.Changeset{}}","ref":"Prequest.Manage.html#update_view/2","title":"Prequest.Manage.update_view/2","type":"function"},{"doc":"","ref":"Prequest.Manage.html#t:article/0","title":"Prequest.Manage.article/0","type":"type"},{"doc":"","ref":"Prequest.Manage.html#t:changeset/0","title":"Prequest.Manage.changeset/0","type":"type"},{"doc":"","ref":"Prequest.Manage.html#t:report/0","title":"Prequest.Manage.report/0","type":"type"},{"doc":"","ref":"Prequest.Manage.html#t:topic/0","title":"Prequest.Manage.topic/0","type":"type"},{"doc":"","ref":"Prequest.Manage.html#t:user/0","title":"Prequest.Manage.user/0","type":"type"},{"doc":"","ref":"Prequest.Manage.html#t:view/0","title":"Prequest.Manage.view/0","type":"type"},{"doc":"A custom color manager.To add a new color just add a color_class/1' clause matching the topic name.# lib/prequest/manage/topic/color.ex # Example of adding a color for the &quot;elixir&quot; tag. ... def color_class(&quot;elixir&quot;), do: &quot;bg-purple-800&quot; # new clause def color_class(_), do: random() ...The new custom clause must be declared before color_class(_) clause.Color reference: TailwindCSS","ref":"Prequest.Manage.Topic.Color.html","title":"Prequest.Manage.Topic.Color","type":"module"},{"doc":"Get a class for background color for the given topic.If the topic name is not declared as a color_class/1 clause, it wil generate a random class using random/0.Examplesiex&gt; Color.color_class(&quot;elixir&quot;) &quot;bg-purple-800&quot; iex&gt; Color.color_class(&quot;a&quot;) &quot;bg-green-300&quot; # random","ref":"Prequest.Manage.Topic.Color.html#color_class/1","title":"Prequest.Manage.Topic.Color.color_class/1","type":"function"},{"doc":"Generate a random class for background color.Examplesiex&gt; Color.random() &quot;bg-blue-500&quot;","ref":"Prequest.Manage.Topic.Color.html#random/0","title":"Prequest.Manage.Topic.Color.random/0","type":"function"},{"doc":"Module with named helpers generated from PrequestWeb.Router.","ref":"PrequestWeb.Router.Helpers.html","title":"PrequestWeb.Router.Helpers","type":"module"},{"doc":"","ref":"PrequestWeb.Router.Helpers.html#live_dashboard_path/2","title":"PrequestWeb.Router.Helpers.live_dashboard_path/2","type":"function"},{"doc":"","ref":"PrequestWeb.Router.Helpers.html#live_dashboard_path/3","title":"PrequestWeb.Router.Helpers.live_dashboard_path/3","type":"function"},{"doc":"","ref":"PrequestWeb.Router.Helpers.html#live_dashboard_path/4","title":"PrequestWeb.Router.Helpers.live_dashboard_path/4","type":"function"},{"doc":"","ref":"PrequestWeb.Router.Helpers.html#live_dashboard_path/5","title":"PrequestWeb.Router.Helpers.live_dashboard_path/5","type":"function"},{"doc":"","ref":"PrequestWeb.Router.Helpers.html#live_dashboard_url/2","title":"PrequestWeb.Router.Helpers.live_dashboard_url/2","type":"function"},{"doc":"","ref":"PrequestWeb.Router.Helpers.html#live_dashboard_url/3","title":"PrequestWeb.Router.Helpers.live_dashboard_url/3","type":"function"},{"doc":"","ref":"PrequestWeb.Router.Helpers.html#live_dashboard_url/4","title":"PrequestWeb.Router.Helpers.live_dashboard_url/4","type":"function"},{"doc":"","ref":"PrequestWeb.Router.Helpers.html#live_dashboard_url/5","title":"PrequestWeb.Router.Helpers.live_dashboard_url/5","type":"function"},{"doc":"","ref":"PrequestWeb.Router.Helpers.html#live_path/2","title":"PrequestWeb.Router.Helpers.live_path/2","type":"function"},{"doc":"","ref":"PrequestWeb.Router.Helpers.html#live_path/3","title":"PrequestWeb.Router.Helpers.live_path/3","type":"function"},{"doc":"","ref":"PrequestWeb.Router.Helpers.html#live_url/2","title":"PrequestWeb.Router.Helpers.live_url/2","type":"function"},{"doc":"","ref":"PrequestWeb.Router.Helpers.html#live_url/3","title":"PrequestWeb.Router.Helpers.live_url/3","type":"function"},{"doc":"Generates the path information including any necessary prefix.","ref":"PrequestWeb.Router.Helpers.html#path/2","title":"PrequestWeb.Router.Helpers.path/2","type":"function"},{"doc":"Generates an integrity hash to a static asset given its file path.","ref":"PrequestWeb.Router.Helpers.html#static_integrity/2","title":"PrequestWeb.Router.Helpers.static_integrity/2","type":"function"},{"doc":"Generates path to a static asset given its file path.","ref":"PrequestWeb.Router.Helpers.html#static_path/2","title":"PrequestWeb.Router.Helpers.static_path/2","type":"function"},{"doc":"Generates url to a static asset given its file path.","ref":"PrequestWeb.Router.Helpers.html#static_url/2","title":"PrequestWeb.Router.Helpers.static_url/2","type":"function"},{"doc":"Generates the connection/endpoint base URL without any path information.","ref":"PrequestWeb.Router.Helpers.html#url/1","title":"PrequestWeb.Router.Helpers.url/1","type":"function"},{"doc":"Contributing to PrequestMake sure to have docker-compose installed.","ref":"contributing.html","title":"Contributing to Prequest","type":"extras"},{"doc":"Enter the development container:git clone https://github.com/felipelincoln/prequest.git cd prequest/ docker-compose run --service-ports web /bin/shCreate the database, run migrations and start the server:mix ecto.setup mix phx.serverAfter exiting the container (with the exit command) you can get back to it:docker start -a -i prequest_web_run_&lt;hash&gt; Alternatively, you can fast start the services:docker-compose up","ref":"contributing.html#running-the-application-locally","title":"Contributing to Prequest - Running the application locally","type":"extras"},{"doc":"Good practice to run before making commits. It will mirror our GitHub action.Run the following inside the container:mix ciThis will run: mix format --check-formatted --dry-run mix credo --strict mix sobelow -v mix coveralls.github","ref":"contributing.html#test-pipeline","title":"Contributing to Prequest - Test pipeline","type":"extras"},{"doc":"Run whenever your changes may cause documentation changes.Run the following inside the container:mix docs","ref":"contributing.html#building-documentation","title":"Contributing to Prequest - Building documentation","type":"extras"}]