searchNodes=[{"doc":"A interface that underlies database communication for user management.Use casesWe can do all sort of things related to user management in this context.Let's start by inserting a new user to the databaseiex&gt;Accounts.create_user(%{username: &quot;felipelincoln&quot;}) {:ok, %Prequest.Accounts.User{ __meta__: #Ecto.Schema.Metadata&lt;:loaded, &quot;users&quot;&gt;, articles: #Ecto.Association.NotLoaded&lt;association :articles is not loaded&gt;, bio: nil, id: 1, inserted_at: ~N[2020-09-24 09:12:29], name: nil, reports: #Ecto.Association.NotLoaded&lt;association :reports is not loaded&gt;, updated_at: ~N[2020-09-24 09:12:29], username: &quot;felipelincoln&quot;, views: #Ecto.Association.NotLoaded&lt;association :views is not loaded&gt; }}we can now retrieve this user either by its id or usernameiex&gt; user = Accounts.get_user! 1 %Prequest.Accounts.User{ __meta__: #Ecto.Schema.Metadata&lt;:loaded, &quot;users&quot;&gt;, articles: #Ecto.Association.NotLoaded&lt;association :articles is not loaded&gt;, bio: nil, id: 1, inserted_at: ~N[2020-09-22 10:45:16], name: nil, reports: #Ecto.Association.NotLoaded&lt;association :reports is not loaded&gt;, updated_at: ~N[2020-09-22 10:45:16], username: &quot;felipelincoln&quot;, views: #Ecto.Association.NotLoaded&lt;association :views is not loaded&gt; } iex&gt; Accounts.get_user &quot;felipelincoln&quot; %Prequest.Accounts.User{ __meta__: #Ecto.Schema.Metadata&lt;:loaded, &quot;users&quot;&gt;, articles: #Ecto.Association.NotLoaded&lt;association :articles is not loaded&gt;, bio: nil, id: 1, inserted_at: ~N[2020-09-22 10:45:16], name: nil, reports: #Ecto.Association.NotLoaded&lt;association :reports is not loaded&gt;, updated_at: ~N[2020-09-22 10:45:16], username: &quot;felipelincoln&quot;, views: #Ecto.Association.NotLoaded&lt;association :views is not loaded&gt; }with user we got from database we can update itiex&gt; {:ok, user} = Accounts.update_user user, %{bio: &quot;this is my bio&quot;} {:ok, %Prequest.Accounts.User{ __meta__: #Ecto.Schema.Metadata&lt;:loaded, &quot;users&quot;&gt;, articles: #Ecto.Association.NotLoaded&lt;association :articles is not loaded&gt;, bio: &quot;this is my bio&quot;, id: 1, inserted_at: ~N[2020-09-22 10:45:16], name: nil, reports: #Ecto.Association.NotLoaded&lt;association :reports is not loaded&gt;, updated_at: ~N[2020-09-24 09:16:59], username: &quot;felipelincoln&quot;, views: #Ecto.Association.NotLoaded&lt;association :views is not loaded&gt; }}and finally, delete it.iex&gt; Accounts.delete_user user {:ok, %Prequest.Accounts.User{ __meta__: #Ecto.Schema.Metadata&lt;:deleted, &quot;users&quot;&gt;, articles: #Ecto.Association.NotLoaded&lt;association :articles is not loaded&gt;, bio: nil, id: 1, inserted_at: ~N[2020-09-22 10:45:16], name: nil, reports: #Ecto.Association.NotLoaded&lt;association :reports is not loaded&gt;, updated_at: ~N[2020-09-22 10:45:16], username: &quot;felipelincoln&quot;, views: #Ecto.Association.NotLoaded&lt;association :views is not loaded&gt; }}","ref":"Prequest.Accounts.html","title":"Prequest.Accounts","type":"module"},{"doc":"Creates a user.Examplesiex&gt; create_user(%{ username: &quot;felipelincoln&quot;, name: &quot;Felipe de Souza Lincoln&quot;, bio: &quot;this is my bio&quot; }) {:ok, %User{}} iex&gt; create_user(%{}) {:error, %Ecto.Changeset{}}","ref":"Prequest.Accounts.html#create_user/1","title":"Prequest.Accounts.create_user/1","type":"function"},{"doc":"Deletes a user.Examplesiex&gt; delete_user(user) {:ok, %User{}} iex&gt; delete_user(user) {:error, %Ecto.Changeset{}}","ref":"Prequest.Accounts.html#delete_user/1","title":"Prequest.Accounts.delete_user/1","type":"function"},{"doc":"Gets a single user by its username.Examplesiex&gt; get_user(&quot;felipelincoln&quot;) %User{} iex&gt; get_user(&quot;nonexistinguser&quot;) nil","ref":"Prequest.Accounts.html#get_user/1","title":"Prequest.Accounts.get_user/1","type":"function"},{"doc":"Gets a single user.Raises Ecto.NoResultsError if the User does not exist.Examplesiex&gt; get_user!(123) %User{} iex&gt; get_user!(456) ** (Ecto.NoResultsError)","ref":"Prequest.Accounts.html#get_user!/1","title":"Prequest.Accounts.get_user!/1","type":"function"},{"doc":"Updates a user.Examplesiex&gt; update_user(user, %{bio: &quot;updated bio&quot;}) {:ok, %User{}} iex&gt; update_user(user, %{username: nil}) {:error, %Ecto.Changeset{}}","ref":"Prequest.Accounts.html#update_user/2","title":"Prequest.Accounts.update_user/2","type":"function"},{"doc":"","ref":"Prequest.Accounts.html#t:changeset/0","title":"Prequest.Accounts.changeset/0","type":"type"},{"doc":"","ref":"Prequest.Accounts.html#t:user/0","title":"Prequest.Accounts.user/0","type":"type"},{"doc":"A interface that underlies database communication for user managed content.Use casesWe are to create two users, one will post an article and the other will interact with this article.Let's start by creating the users using the Prequest.Accounts context real quick.iex&gt; {:ok, felipe} = Accounts.create_user %{username: &quot;felipe&quot;} iex&gt; {:ok, lincoln} = Accounts.create_user %{username: &quot;lincoln&quot;}Back to our CMS context. Let's create an article and associate it to felipeiex&gt; {:ok, article} = CMS.create_article %{ ...&gt; title: &quot;some title&quot;, ...&gt; cover: &quot;some cover&quot;, ...&gt; source: &quot;some github url&quot;, ...&gt; user_id: felipe.id ...&gt; }Now let's make lincoln read and like this articleiex&gt; CMS.create_view %{ ...&gt; liked?: true, ...&gt; user_id: lincoln.id, ...&gt; article_id: article.id ...&gt; }An annonymous user reads this article and finds a typo, let's report thatiex&gt; CMS.create_report %{ ...&gt; article_id: article.id, ...&gt; message: &quot;There is some typo&quot; ...&gt; }Let's take a look at this article nowiex&gt; CMS.get_article!(article.id) |&gt; Repo.preload([:user, :reports, :views]) %Prequest.CMS.Article{ __meta__: #Ecto.Schema.Metadata&lt;:loaded, &quot;articles&quot;&gt;, cover: &quot;some cover&quot;, id: 3, inserted_at: ~N[2020-09-17 11:19:05], reports: [ %Prequest.CMS.Report{ __meta__: #Ecto.Schema.Metadata&lt;:loaded, &quot;reports&quot;&gt;, article: #Ecto.Association.NotLoaded&lt;association :article is not loaded&gt;, article_id: 3, id: 1, inserted_at: ~N[2020-09-17 11:21:59], message: &quot;There is some typo&quot;, updated_at: ~N[2020-09-17 11:21:59], user: #Ecto.Association.NotLoaded&lt;association :user is not loaded&gt;, user_id: nil } ], source: &quot;some github url&quot;, title: &quot;some title&quot;, topics: #Ecto.Association.NotLoaded&lt;association :topics is not loaded&gt;, updated_at: ~N[2020-09-17 11:19:05], user: %Prequest.Accounts.User{ __meta__: #Ecto.Schema.Metadata&lt;:loaded, &quot;users&quot;&gt;, articles: #Ecto.Association.NotLoaded&lt;association :articles is not loaded&gt;, bio: nil, id: 2, inserted_at: ~N[2020-09-17 11:16:44], name: nil, reports: #Ecto.Association.NotLoaded&lt;association :reports is not loaded&gt;, updated_at: ~N[2020-09-17 11:16:44], username: &quot;felipe&quot;, views: #Ecto.Association.NotLoaded&lt;association :views is not loaded&gt; }, user_id: 2, views: [ %Prequest.CMS.View{ __meta__: #Ecto.Schema.Metadata&lt;:loaded, &quot;view&quot;&gt;, article: #Ecto.Association.NotLoaded&lt;association :article is not loaded&gt;, article_id: 3, id: 3, inserted_at: ~N[2020-09-17 11:20:43], liked?: true, updated_at: ~N[2020-09-17 11:20:43], user: #Ecto.Association.NotLoaded&lt;association :user is not loaded&gt;, user_id: 3 } ] }","ref":"Prequest.CMS.html","title":"Prequest.CMS","type":"module"},{"doc":"Creates an article.Examplesiex&gt; create_article(%{ ...&gt; title: &quot;some title&quot;, ...&gt; source: &quot;some github url&quot;, ...&gt; cover: &quot;some image url&quot;, ...&gt; user_id: 10 ...&gt; }) {:ok, %Article{}} iex&gt; create_article(%{}) {:error, %Ecto.Changeset{}}A topics key can be passed in the map input to associate topics with the article, whether it already exists or not.iex&gt; create_article(%{ ...&gt; title: &quot;some title2&quot;, ...&gt; source: &quot;some github url2&quot;, ...&gt; cover: &quot;some image url2&quot;, ...&gt; user_id: 10, ...&gt; topics: [%{name: &quot;elixir&quot;}, %{name: &quot;phoenix&quot;}] ...&gt; }) {:ok, %Article{}}Once the topics named &quot;elixir&quot; and &quot;phoenix&quot; was created in the previous example, we can associate them again with a new article. We can proceed in two manners:Get its struct from database and insert it into the topics list.Pass the same map we used to create it.Let's use the &quot;phoenix&quot; topic in the former way and &quot;elixir&quot; in the latter.iex&gt; topic = CMS.get_topic(&quot;phoenix&quot;) iex&gt; create_article(%{ ...&gt; title: &quot;some title3&quot;, ...&gt; source: &quot;some github url3&quot;, ...&gt; cover: &quot;some image url3&quot;, ...&gt; user_id: 10, ...&gt; topics: [%{name: &quot;elixir&quot;}, topic] ...&gt; }) {:ok, %Article{}}","ref":"Prequest.CMS.html#create_article/1","title":"Prequest.CMS.create_article/1","type":"function"},{"doc":"Creates a report.Examplesiex&gt; create_report(%{user_id: 15, article_id: 3}) {:ok, %Report{}} iex&gt; create_report(%{}) {:error, %Ecto.Changeset{}}","ref":"Prequest.CMS.html#create_report/1","title":"Prequest.CMS.create_report/1","type":"function"},{"doc":"Creates a topic.Examplesiex&gt; create_topic(%{name: &quot;new topic&quot;}) {:ok, %Topic{}} iex&gt; create_topic(%{name: &quot;&quot;}) {:error, %Ecto.Changeset{}}","ref":"Prequest.CMS.html#create_topic/1","title":"Prequest.CMS.create_topic/1","type":"function"},{"doc":"Creates a view.Examplesiex&gt; create_view(%{user_id: 23, article_id: 12}) {:ok, %View{}} iex&gt; create_view(%{}) {:error, %Ecto.Changeset{}}","ref":"Prequest.CMS.html#create_view/1","title":"Prequest.CMS.create_view/1","type":"function"},{"doc":"Deletes an article.Examplesiex&gt; delete_article(article) {:ok, %Article{}} iex&gt; delete_article(article) {:error, %Ecto.Changeset{}}","ref":"Prequest.CMS.html#delete_article/1","title":"Prequest.CMS.delete_article/1","type":"function"},{"doc":"Deletes a report.Examplesiex&gt; delete_report(report) {:ok, %Report{}} iex&gt; delete_report(report) {:error, %Ecto.Changeset{}}","ref":"Prequest.CMS.html#delete_report/1","title":"Prequest.CMS.delete_report/1","type":"function"},{"doc":"Deletes a topic.Examplesiex&gt; delete_topic(topic) {:ok, %Topic{}} iex&gt; delete_topic(topic) {:error, %Ecto.Changeset{}}","ref":"Prequest.CMS.html#delete_topic/1","title":"Prequest.CMS.delete_topic/1","type":"function"},{"doc":"Deletes a view.Examplesiex&gt; delete_view(view) {:ok, %View{}} iex&gt; delete_view(view) {:error, %Ecto.Changeset{}}","ref":"Prequest.CMS.html#delete_view/1","title":"Prequest.CMS.delete_view/1","type":"function"},{"doc":"Gets a single article.Raises Ecto.NoResultsError if the Article does not exist.Examplesiex&gt; get_article!(123) %Article{} iex&gt; get_article!(456) ** (Ecto.NoResultsError)","ref":"Prequest.CMS.html#get_article!/1","title":"Prequest.CMS.get_article!/1","type":"function"},{"doc":"Gets a single report.Raises Ecto.NoResultsError if the Report does not exist.Examplesiex&gt; get_report!(123) %Report{} iex&gt; get_report!(456) ** (Ecto.NoResultsError)","ref":"Prequest.CMS.html#get_report!/1","title":"Prequest.CMS.get_report!/1","type":"function"},{"doc":"Gets a single topic by its name.Examplesiex&gt; get_topic(&quot;elixir&quot;) %Topic{} iex&gt; get_topic(&quot;&quot;) nil","ref":"Prequest.CMS.html#get_topic/1","title":"Prequest.CMS.get_topic/1","type":"function"},{"doc":"Gets a single view.Examplesiex&gt; get_view(user.id, article.id) %View{} iex&gt; get_view(0, 0) nil","ref":"Prequest.CMS.html#get_view/2","title":"Prequest.CMS.get_view/2","type":"function"},{"doc":"Preload all fields from a schema's struct inside a pipeline.ExamplesIt can be used for create_* pipelines,iex&gt; create_article(%{...}) {:ok, %Article{ #=&gt; reports: #Ecto.Association.NotLoaded&lt;association :reports is not loaded&gt; #=&gt; user: #Ecto.Association.NotLoaded&lt;association :user is not loaded&gt; #=&gt; views: #Ecto.Association.NotLoaded&lt;association :views is not loaded&gt; ... } } iex&gt; create_article(%{...}) |&gt; preload() {:ok, %Article{ reports: [%Report{}, ...], topics: [%Topic{}, ...], user: %User{}, views: [%View{}, ...], ... } }and also update_* pipelines.iex&gt; update_report(%{...}) {:ok, %Report{ #=&gt; user: #Ecto.Association.NotLoaded&lt;association :user is not loaded&gt; #=&gt; article: #Ecto.Association.NotLoaded&lt;association :article is not loaded&gt; ... } } iex&gt; update_report(%{...}) |&gt; preload() {:ok, %Report{ user: %User{}, article: %Article{}, ... } }If the preceding changeset contain errors it does not do anything.iex&gt; create_topic(%{name: nil}) |&gt; preload() {:error, %Ecto.Changeset{}}","ref":"Prequest.CMS.html#preload/1","title":"Prequest.CMS.preload/1","type":"function"},{"doc":"Preload fields from a schema's struct.Raises ArgumentError if the fields does not exist in the struct.Examplesiex&gt; user %User{} #=&gt; articles: #Ecto.Association.NotLoaded&lt;association :articles is not loaded&gt; iex&gt; preload!(user, :articles) %User{ articles: [%Article{}, ...], ... } iex&gt; article %Article{ #=&gt; reports: #Ecto.Association.NotLoaded&lt;association :reports is not loaded&gt; #=&gt; views: #Ecto.Association.NotLoaded&lt;association :views is not loaded&gt; } iex&gt; preload!(article, [:views, :reports]) %Article{ views: [%View{}, ...], reports: [%Report{}, ...], ... } iex&gt; preload!(article, :field) ** (ArgumentError)","ref":"Prequest.CMS.html#preload!/2","title":"Prequest.CMS.preload!/2","type":"function"},{"doc":"Updates an article.Examplesiex&gt; update_article(article, %{title: &quot;updated title&quot;}) {:ok, %Article{}} iex&gt; update_article(article, %{source: nil}) {:error, %Ecto.Changeset{}}When updating the topics do not forget to append the new one to the existing ones. Otherwise it will be replaced.To see how the topics field works take a look at create_article/1iex&gt; article |&gt; CMS.preload!(:topics) %Article{ topics: [ %Topic{name: &quot;elixir&quot;}, %Topic{name: &quot;ecto&quot;} ], ... } iex&gt; {:ok, article} = update_article(article, %{topics: [%{name: &quot;phoenix&quot;}]}) {:ok, %Article{ topics: [%Topic{name: &quot;phoenix&quot;}], ... } } iex&gt; update_article(article, %{topics: article.topics ++ [%{name: &quot;elixir&quot;}, %{name: &quot;ecto&quot;}]}) {:ok, %Article{ topics: [ %Topic{name: &quot;elixir&quot;}, %Topic{name: &quot;ecto&quot;}, %Topic{name: &quot;phoenix&quot;} ], ... } }","ref":"Prequest.CMS.html#update_article/2","title":"Prequest.CMS.update_article/2","type":"function"},{"doc":"Updates a report.Examplesiex&gt; update_report(report, %{message: &quot;updated message&quot;}) {:ok, %Report{}} iex&gt; update_report(report, %{article_id: nil}) {:error, %Ecto.Changeset{}}","ref":"Prequest.CMS.html#update_report/2","title":"Prequest.CMS.update_report/2","type":"function"},{"doc":"Updates a topic.Examplesiex&gt; update_topic(topic, %{name: &quot;updated name&quot;}) {:ok, %Topic{}} iex&gt; update_topic(topic, %{name: &quot;&quot;}) {:error, %Ecto.Changeset{}}","ref":"Prequest.CMS.html#update_topic/2","title":"Prequest.CMS.update_topic/2","type":"function"},{"doc":"Updates a view.Examplesiex&gt; update_view(view, %{liked?: true}) {:ok, %View{}} iex&gt; update_view(view, %{article_id: nil}) {:error, %Ecto.Changeset{}}","ref":"Prequest.CMS.html#update_view/2","title":"Prequest.CMS.update_view/2","type":"function"},{"doc":"","ref":"Prequest.CMS.html#t:article/0","title":"Prequest.CMS.article/0","type":"type"},{"doc":"","ref":"Prequest.CMS.html#t:changeset/0","title":"Prequest.CMS.changeset/0","type":"type"},{"doc":"","ref":"Prequest.CMS.html#t:report/0","title":"Prequest.CMS.report/0","type":"type"},{"doc":"","ref":"Prequest.CMS.html#t:topic/0","title":"Prequest.CMS.topic/0","type":"type"},{"doc":"","ref":"Prequest.CMS.html#t:view/0","title":"Prequest.CMS.view/0","type":"type"},{"doc":"Repo commands to run with the bin/prequest executableExample: bin/prequest eval &quot;Prequest.Release.migrate&quot; to make repo migrations","ref":"Prequest.Release.html","title":"Prequest.Release","type":"module"},{"doc":"","ref":"Prequest.Release.html#migrate/0","title":"Prequest.Release.migrate/0","type":"function"},{"doc":"","ref":"Prequest.Release.html#rollback/2","title":"Prequest.Release.rollback/2","type":"function"},{"doc":"","ref":"Prequest.Repo.html","title":"Prequest.Repo","type":"module"},{"doc":"Callback implementation for Ecto.Repo.aggregate/3.","ref":"Prequest.Repo.html#aggregate/3","title":"Prequest.Repo.aggregate/3","type":"function"},{"doc":"Callback implementation for Ecto.Repo.aggregate/4.","ref":"Prequest.Repo.html#aggregate/4","title":"Prequest.Repo.aggregate/4","type":"function"},{"doc":"Callback implementation for Ecto.Repo.all/2.","ref":"Prequest.Repo.html#all/2","title":"Prequest.Repo.all/2","type":"function"},{"doc":"Callback implementation for Ecto.Repo.checkout/2.","ref":"Prequest.Repo.html#checkout/2","title":"Prequest.Repo.checkout/2","type":"function"},{"doc":"","ref":"Prequest.Repo.html#child_spec/1","title":"Prequest.Repo.child_spec/1","type":"function"},{"doc":"Callback implementation for Ecto.Repo.config/0.","ref":"Prequest.Repo.html#config/0","title":"Prequest.Repo.config/0","type":"function"},{"doc":"Callback implementation for Ecto.Repo.default_options/1.","ref":"Prequest.Repo.html#default_options/1","title":"Prequest.Repo.default_options/1","type":"function"},{"doc":"Callback implementation for Ecto.Repo.delete/2.","ref":"Prequest.Repo.html#delete/2","title":"Prequest.Repo.delete/2","type":"function"},{"doc":"Callback implementation for Ecto.Repo.delete!/2.","ref":"Prequest.Repo.html#delete!/2","title":"Prequest.Repo.delete!/2","type":"function"},{"doc":"Callback implementation for Ecto.Repo.delete_all/2.","ref":"Prequest.Repo.html#delete_all/2","title":"Prequest.Repo.delete_all/2","type":"function"},{"doc":"Callback implementation for Ecto.Repo.exists?/2.","ref":"Prequest.Repo.html#exists?/2","title":"Prequest.Repo.exists?/2","type":"function"},{"doc":"Callback implementation for Ecto.Repo.get/3.","ref":"Prequest.Repo.html#get/3","title":"Prequest.Repo.get/3","type":"function"},{"doc":"Callback implementation for Ecto.Repo.get!/3.","ref":"Prequest.Repo.html#get!/3","title":"Prequest.Repo.get!/3","type":"function"},{"doc":"Callback implementation for Ecto.Repo.get_by/3.","ref":"Prequest.Repo.html#get_by/3","title":"Prequest.Repo.get_by/3","type":"function"},{"doc":"Callback implementation for Ecto.Repo.get_by!/3.","ref":"Prequest.Repo.html#get_by!/3","title":"Prequest.Repo.get_by!/3","type":"function"},{"doc":"Callback implementation for Ecto.Repo.get_dynamic_repo/0.","ref":"Prequest.Repo.html#get_dynamic_repo/0","title":"Prequest.Repo.get_dynamic_repo/0","type":"function"},{"doc":"Callback implementation for Ecto.Repo.in_transaction?/0.","ref":"Prequest.Repo.html#in_transaction?/0","title":"Prequest.Repo.in_transaction?/0","type":"function"},{"doc":"Callback implementation for Ecto.Repo.insert/2.","ref":"Prequest.Repo.html#insert/2","title":"Prequest.Repo.insert/2","type":"function"},{"doc":"Callback implementation for Ecto.Repo.insert!/2.","ref":"Prequest.Repo.html#insert!/2","title":"Prequest.Repo.insert!/2","type":"function"},{"doc":"Callback implementation for Ecto.Repo.insert_all/3.","ref":"Prequest.Repo.html#insert_all/3","title":"Prequest.Repo.insert_all/3","type":"function"},{"doc":"Callback implementation for Ecto.Repo.insert_or_update/2.","ref":"Prequest.Repo.html#insert_or_update/2","title":"Prequest.Repo.insert_or_update/2","type":"function"},{"doc":"Callback implementation for Ecto.Repo.insert_or_update!/2.","ref":"Prequest.Repo.html#insert_or_update!/2","title":"Prequest.Repo.insert_or_update!/2","type":"function"},{"doc":"Callback implementation for Ecto.Repo.load/2.","ref":"Prequest.Repo.html#load/2","title":"Prequest.Repo.load/2","type":"function"},{"doc":"Callback implementation for Ecto.Repo.one/2.","ref":"Prequest.Repo.html#one/2","title":"Prequest.Repo.one/2","type":"function"},{"doc":"Callback implementation for Ecto.Repo.one!/2.","ref":"Prequest.Repo.html#one!/2","title":"Prequest.Repo.one!/2","type":"function"},{"doc":"Callback implementation for Ecto.Repo.preload/3.","ref":"Prequest.Repo.html#preload/3","title":"Prequest.Repo.preload/3","type":"function"},{"doc":"Callback implementation for Ecto.Repo.prepare_query/3.","ref":"Prequest.Repo.html#prepare_query/3","title":"Prequest.Repo.prepare_query/3","type":"function"},{"doc":"Callback implementation for Ecto.Repo.put_dynamic_repo/1.","ref":"Prequest.Repo.html#put_dynamic_repo/1","title":"Prequest.Repo.put_dynamic_repo/1","type":"function"},{"doc":"A convenience function for SQL-based repositories that executes the given query.See Ecto.Adapters.SQL.query/4 for more information.","ref":"Prequest.Repo.html#query/3","title":"Prequest.Repo.query/3","type":"function"},{"doc":"A convenience function for SQL-based repositories that executes the given query.See Ecto.Adapters.SQL.query!/4 for more information.","ref":"Prequest.Repo.html#query!/3","title":"Prequest.Repo.query!/3","type":"function"},{"doc":"Callback implementation for Ecto.Repo.rollback/1.","ref":"Prequest.Repo.html#rollback/1","title":"Prequest.Repo.rollback/1","type":"function"},{"doc":"Callback implementation for Ecto.Repo.start_link/1.","ref":"Prequest.Repo.html#start_link/1","title":"Prequest.Repo.start_link/1","type":"function"},{"doc":"Callback implementation for Ecto.Repo.stop/1.","ref":"Prequest.Repo.html#stop/1","title":"Prequest.Repo.stop/1","type":"function"},{"doc":"Callback implementation for Ecto.Repo.stream/2.","ref":"Prequest.Repo.html#stream/2","title":"Prequest.Repo.stream/2","type":"function"},{"doc":"A convenience function for SQL-based repositories that translates the given query to SQL.See Ecto.Adapters.SQL.to_sql/3 for more information.","ref":"Prequest.Repo.html#to_sql/2","title":"Prequest.Repo.to_sql/2","type":"function"},{"doc":"Callback implementation for Ecto.Repo.transaction/2.","ref":"Prequest.Repo.html#transaction/2","title":"Prequest.Repo.transaction/2","type":"function"},{"doc":"Callback implementation for Ecto.Repo.update/2.","ref":"Prequest.Repo.html#update/2","title":"Prequest.Repo.update/2","type":"function"},{"doc":"Callback implementation for Ecto.Repo.update!/2.","ref":"Prequest.Repo.html#update!/2","title":"Prequest.Repo.update!/2","type":"function"},{"doc":"Callback implementation for Ecto.Repo.update_all/3.","ref":"Prequest.Repo.html#update_all/3","title":"Prequest.Repo.update_all/3","type":"function"},{"doc":"The schema that models the user.schema &quot;users&quot; do field :bio, :string field :name, :string field :username, :string timestamps() has_many :articles, CMS.Article has_many :reports, CMS.Report has_many :views, CMS.View endUsers are the one that create content to the platform.","ref":"Prequest.Accounts.User.html","title":"Prequest.Accounts.User","type":"module"},{"doc":"User's changeset.ValidationRequired: username. Unique: username.","ref":"Prequest.Accounts.User.html#changeset/2","title":"Prequest.Accounts.User.changeset/2","type":"function"},{"doc":"The schema that models the article.schema &quot;articles&quot; do field :cover, :string field :source, :string field :title, :string timestamps() belongs_to :user, Accounts.User has_many :reports, Report has_many :views, View many_to_many :topics, Topic, join_through: &quot;articles_topics&quot;, on_replace: :delete endArticle is a content created by a user.","ref":"Prequest.CMS.Article.html","title":"Prequest.CMS.Article","type":"module"},{"doc":"Article's changeset.ValidationRequired: :title, :cover, :source and user_id. Unique: :source.","ref":"Prequest.CMS.Article.html#changeset/2","title":"Prequest.CMS.Article.changeset/2","type":"function"},{"doc":"The schema that models the report.schema &quot;reports&quot; do field :message, :string timestamps() belongs_to :user, Accounts.User belongs_to :article, Article endReport is a type of interaction one can make with an article, whether a registered user or not. This should point out problems in the article's content. Once spotted, it is easier for other (or even the author) to find it in order to fix it.","ref":"Prequest.CMS.Report.html","title":"Prequest.CMS.Report","type":"module"},{"doc":"Report's changesetValidationRequired: article_id.","ref":"Prequest.CMS.Report.html#changeset/2","title":"Prequest.CMS.Report.changeset/2","type":"function"},{"doc":"The schema that models the topic.schema &quot;topics&quot; do field :name, :string timestamps() many_to_many :articles, Article, join_through: &quot;articles_topics&quot; endTopic is a category in which an article can be inserted.","ref":"Prequest.CMS.Topic.html","title":"Prequest.CMS.Topic","type":"module"},{"doc":"Topic's changeset.ValidationRequired: name. Unique: name.","ref":"Prequest.CMS.Topic.html#changeset/2","title":"Prequest.CMS.Topic.changeset/2","type":"function"},{"doc":"The schema that models the view.schema &quot;view&quot; do field :liked?, :boolean, default: false timestamps() belongs_to :user, Accounts.User belongs_to :article, Article endView is the interaction between a user and an article. It shows when the article was viewed and liked by the user.","ref":"Prequest.CMS.View.html","title":"Prequest.CMS.View","type":"module"},{"doc":"View's changeset.ValidationRequired: article_id, user_id.","ref":"Prequest.CMS.View.html#changeset/2","title":"Prequest.CMS.View.changeset/2","type":"function"},{"doc":"Contributing to PrequestMake sure to have docker-compose installed.","ref":"contributing.html","title":"Contributing to Prequest","type":"extras"},{"doc":"Enter the development container:git clone https://github.com/felipelincoln/prequest.git cd prequest/ docker-compose run --service-ports web /bin/shCreate the database, run migrations and start the server:mix ecto.setup mix phx.serverAfter exiting the container (with the exit command) you can get back to it:docker start -a -i prequest_web_run_&lt;hash&gt; Alternatively, you can fast start the services:docker-compose up","ref":"contributing.html#running-the-application-locally","title":"Contributing to Prequest - Running the application locally","type":"extras"},{"doc":"Good practice to run before making commits. It will mirror our GitHub action.Run the following inside the container:mix ciThis will run: mix format --check-formatted --dry-run mix credo --strict mix sobelow -v mix coveralls.github","ref":"contributing.html#test-pipeline","title":"Contributing to Prequest - Test pipeline","type":"extras"},{"doc":"Run whenever your changes may cause documentation changes.Run the following inside the container:mix docs","ref":"contributing.html#building-documentation","title":"Contributing to Prequest - Building documentation","type":"extras"}]